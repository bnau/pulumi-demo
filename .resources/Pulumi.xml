<templateSet group="Pulumi">
  <template name="fnb" value="function bdd(): Output&lt;string&gt; {&#10;}&#10;&#10;const dbHost = bdd()&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fna" value="function app(dbHost: Output&lt;string&gt;): Output&lt;string&gt; {&#10;}&#10;&#10;const url = app(dbHost);&#10;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="imp" value="import {Output} from &quot;@pulumi/pulumi&quot;;&#10;import * as kubernetes from &quot;@pulumi/kubernetes&quot;;&#10;import * as docker from &quot;@pulumi/docker&quot;;&#10;import * as pulumi from &quot;@pulumi/pulumi&quot;;&#10;import * as path from &quot;node:path&quot;;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cred" value="const dbUser = &quot;demo&quot;;&#10;const dbPassword = &quot;my-password&quot;;&#10;const dbName = &quot;demo&quot;;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="dbu" value="new pulumi.Config().get(&quot;dbUser&quot;)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="dbp" value="new pulumi.Config().getSecret(&quot;dbPassword&quot;)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="app" value="    const appLabels = {&#10;        app: &quot;nginx&quot;,&#10;    };&#10;    const image = new docker.Image(&quot;my-image&quot;, {&#10;        build: {&#10;            context: path.join(__dirname, &quot;backend&quot;),&#10;        },&#10;        imageName: &quot;pulumi-demo&quot;,&#10;        skipPush: true,&#10;    }, {parent: this});&#10;&#10;    const deployment = new kubernetes.apps.v1.Deployment(&quot;app&quot;, {&#10;        metadata: {&#10;            namespace: &quot;demo&quot;,&#10;        },&#10;        spec: {&#10;            selector: {&#10;                matchLabels: appLabels,&#10;            },&#10;            replicas: 1,&#10;            template: {&#10;                metadata: {&#10;                    labels: appLabels,&#10;                },&#10;                spec: {&#10;                    containers: [{&#10;                        image: image.imageName,&#10;                        name: &quot;pulumi-demo&quot;,&#10;                        imagePullPolicy: &quot;Never&quot;,&#10;                        env: [&#10;                            {&#10;                                name: &quot;DB_USER&quot;,&#10;                                value: dbUser,&#10;                            },&#10;                            {&#10;                                name: &quot;DB_PASSWORD&quot;,&#10;                                value: dbPassword,&#10;                            },&#10;                            {&#10;                                name: &quot;DB_HOST&quot;,&#10;                                value: dbHost,&#10;                            },&#10;                            {&#10;                                name: &quot;DB_NAME&quot;,&#10;                                value: dbName,&#10;                            },&#10;                        ],&#10;                    }],&#10;                },&#10;            },&#10;        },&#10;    }, {parent: this});&#10;&#10;    const service = new kubernetes.core.v1.Service(&quot;app&quot;, {&#10;        metadata: {&#10;            namespace: &quot;demo&quot;,&#10;        },&#10;        spec: {&#10;            ports: [{&#10;                port: 80,&#10;                targetPort: 8080,&#10;                protocol: &quot;TCP&quot;,&#10;            }],&#10;            type: &quot;LoadBalancer&quot;,&#10;            selector: appLabels,&#10;        },&#10;    }, {dependsOn: [deployment], parent: this});&#10;&#10;    return pulumi.all([service.status, service.spec])&#10;        .apply(([status, spec]) =&gt;&#10;            `http://${status.loadBalancer.ingress[0].hostname}:${spec.ports[0].port}`)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="bdd" value="    const namespace = new kubernetes.core.v1.Namespace(&quot;app&quot;, {&#10;        metadata: {&#10;            name: &quot;demo&quot;,&#10;        }&#10;    });&#10;&#10;    const pgChart = new kubernetes.helm.v3.Chart(&quot;postgres&quot;, {&#10;            namespace: &quot;demo&quot;,&#10;            chart: &quot;postgresql&quot;,&#10;            fetchOpts: {&#10;                repo: &quot;https://charts.bitnami.com/bitnami&quot;,&#10;            },&#10;            values: {&#10;                auth: {&#10;                    username: dbUser,&#10;                    password: dbPassword,&#10;                    postgresPassword: dbPassword,&#10;                    database: dbName,&#10;                }&#10;&#10;            },&#10;        }, {dependsOn: namespace});&#10;&#10;    return pgChart.getResourceProperty(&quot;v1/Service&quot;, `demo/postgres-postgresql`, &quot;metadata&quot;).name;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>